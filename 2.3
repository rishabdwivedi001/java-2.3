import java.util.*;
import java.util.stream.*;

class Employee {
    String name;
    int age;
    double salary;
    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }
    public String toString() {
        return name + " | " + age + " | " + salary;
    }
}

class Student {
    String name;
    int marks;
    Student(String name, int marks) {
        this.name = name;
        this.marks = marks;
    }
    public String toString() {
        return name + " | " + marks;
    }
}

class Product {
    String name;
    double price;
    String category;
    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }
    public String toString() {
        return name + " | " + price + " | " + category;
    }
}

public class LambdaStreamDemo {
    public static void main(String[] args) {
        // Part a: Employee Sorting
        List<Employee> employees = Arrays.asList(
            new Employee("Pranav", 28, 75000),
            new Employee("Sheela", 24, 90000),
            new Employee("Nikhil", 31, 82000)
        );
        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Sort by Name:");
        employees.forEach(System.out::println);
        employees.sort(Comparator.comparingInt(e -> e.age));
        System.out.println("\nSort by Age:");
        employees.forEach(System.out::println);
        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("\nSort by Salary (Descending):");
        employees.forEach(System.out::println);

        // Part b: Student Filtering and Sorting
        List<Student> students = Arrays.asList(
            new Student("Ashish", 89),
            new Student("Meena", 76),
            new Student("Rahul", 66),
            new Student("Reshma", 91)
        );
        System.out.println("\nStudents with marks > 75, sorted by marks:");
        students.stream()
            .filter(s -> s.marks > 75)
            .sorted(Comparator.comparingInt(s -> s.marks))
            .map(s -> s.name)
            .forEach(System.out::println);

        // Part c: Product Stream Operations
        List<Product> products = Arrays.asList(
            new Product("Pen", 10, "Stationery"),
            new Product("Pencil", 5, "Stationery"),
            new Product("Notebook", 20, "Stationery"),
            new Product("Laptop", 50000, "Electronics"),
            new Product("Mouse", 700, "Electronics"),
            new Product("Phone", 22000, "Electronics")
        );
        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("\nGrouped by Category:");
        grouped.forEach((cat, plist) -> System.out.println(cat + ": " + plist.size() + " items"));
        Map<String, Optional<Product>> maxByCat = products.stream().collect(
            Collectors.groupingBy(p -> p.category, Collectors.maxBy(Comparator.comparingDouble(p -> p.price)))
        );
        System.out.println("\nMost expensive product in each category:");
        maxByCat.forEach((cat, prodOpt) -> System.out.println(cat + ": " + (prodOpt.isPresent() ? prodOpt.get().name : "None")));
        double avgPrice = products.stream().collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage price: " + avgPrice);
    }
}
